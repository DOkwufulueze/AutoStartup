#!/bin/bash
# Auto Startup
# Purpose: This script opens new tabs in terminal and executes custom commands automatically.
# Author: Daniel Okwufulueze
# Date: 14/05/2017


helpText=;
scriptAbsolutePath=;

function getAbsolutePathOfSelf() {
  pushd $(dirname "$0") > /dev/null;
  scriptAbsolutePath="$(pwd -P)";
  popd > /dev/null;
}

function displayHowToUse() {
  helpText=$(cat << EOF



            Auto Startup
            Version: 2.0.0
            Usage:  auto-startup [-h | --help]
                    auto-startup [-c | --command quoted-semicolon-separated-commands]
                    auto-startup [-f | --file-name fileName]
                    auto-startup [-c | --command quoted-semicolon-separated-commands]
                            [[-b | --black-hole] | [-n | --nohup] | [-o | --output file-path]]
                    auto-startup [-f | --file-name fileName]
                            [[-b | --black-hole] | [-n | --nohup] | [-o | --output file-path]]
    
    
            Synopsis:
              Purpose: This script opens new tabs in terminal and
              excutes custom commands automatically.
              It sends command output to either nohup.out, the /dev/null black hole,
              or a custom file, depending on the option selected by the user.
    
              Options:
                -c | --command: This option receives the list of your custom commands in
                quoted string all separated by semicolons [;].
                For example: auto-startup -c "cd daniel; do_something; do_another_thing".

                -f | --file-name: This option receives the name of the file containing
                all the commands you want to run.
                Each command in the file should take a
                line [separate commands with new line characters].

                -h | --help: This option displays this help page.

              Flags:
                -b | --black-hole: If this flag is set, then all output from the
                running processes will be redirected to the /dev/null black-hole.

                -n | --nohup: This flag creates a nohup.out file in the working
                directories of the running processes and redirects all output
                from the running processes to the nohup.out file.

                -o | --output: The --output flag takes the path of the file you
                intend to use for output of running processes.
                If the file does not exist, it will be created.
                All output from the running processes will be redirected
                to the specified file of the --output flag.

                If no flag is supplied, then output will be written to stdin.
                


            Author: Daniel Okwufulueze [https://github.com/DOkwufulueze]
            Date: 14/05/2017
            
EOF
);
}

getAbsolutePathOfSelf;

. "${scriptAbsolutePath}/startup-manager";
setupManagerForEntity;

if [[ $# -gt 0 ]]; then
  while [[ "$1" != "" ]]; do
    case "$1" in
      -b | --black-hole )
        outputStream="black-hole";
      ;;

      -c | --command )
        shift;
        commandText="$1"
        determineEntryValidity "${commandText}" 20 21;
        IFS=";" read -ra TEMP_SHELL_COMMANDS <<< "${commandText}";
      ;;

      -f | --file-name )
        shift;
        fileName=$1;
        determineEntryValidity "${fileName}" 30 31;
        populateShellCommandsFromFile "${fileName}";        
      ;;

      -h | --help )
        displayHowToUse;
        echo "${helpText}" | less;
        exit;
      ;;

      -n | --nohup )
        outputStream="nohup";
      ;;

      -o | --output )
        shift;
        outputFile="$1";
        determineEntryValidity "${outputFile}" 60 61;
        outputStream="custom";
        createFileIfNotExists "" "/";
      ;;

      * )
        echo "Invalid entry in auto-startup invocation.";
        exit;
      ;;

    esac

    shift;
  done

  formatShellCommands;
fi

if [[ ${#SHELL_COMMANDS[@]} -gt 0 ]]; then
  # Loop through the array of commands and execute each one on a new tab

  for ((i = 0; i < ${#SHELL_COMMANDS[@]}; i++)); do
    SHELL_COMMAND="${SHELL_COMMANDS[$i]}";
    export DISPLAY=:0.0 && xdotool key ctrl+shift+t;
    sleep 2;
    xdotool type --delay 1 --clearmodifiers "${SHELL_COMMAND}";
    xdotool key Return;
  done
else
  echo "No Command was supplied to auto-startup";
fi
